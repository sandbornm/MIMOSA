import argparse
import logging
import cv2
import numpy as np
import copy

from comet_ml import Experiment

import torch
from torch.utils.data import DataLoader, random_split,SubsetRandomSampler
from torchvision import transforms

from sklearn.model_selection import RepeatedKFold

from model.ImageMultilabelClassifier import ImageMultilabelClassifier, criterion
from dataloader.MalwareImageDataset import MalwareImageDataset


def get_args():
    parser = argparse.ArgumentParser(description='Train a Malware2Config mulitlabel classifier')

    # meta setup
    parser.add_argument('--examples_dir', '-x', type=str, default="", help='path to image dir')
    parser.add_argument('--labels_csv', '-y', type=str, default="", help='path to labels csv')
    parser.add_argument('--image_sz', '-s', type=int, nargs='+', default=[64,64], help='resize images to these dims. format: --image_sz 64 64')
    parser.add_argument('--name', '-n', type=str, default='Malware2Config_Multilabel', help='Experiment name')
    parser.add_argument('--load', '-f', type=str, default='', help='path to net to load')

    # hyperparams
    parser.add_argument('-e', '--epochs', metavar='E', type=int, default=20, help='Number of epochs', dest='epochs')
    parser.add_argument('-b', '--batch_size', metavar='B', type=int, nargs='?', default=16, help='Batch size',
                        dest='batchsize')
    parser.add_argument('-l', '--learning-rate', metavar='LR', type=float, nargs='?', default=1e-3,
                        help='Learning rate', dest='lr')
    parser.add_argument('-v', '--val_percent', metavar='V', type=float, default=0.2, help='Percent for validation set', dest='val')


    return parser.parse_args()


# https://medium.com/dataseries/k-fold-cross-validation-with-pytorch-and-sklearn-d094aa00105f
def train_epoch(net, device, dataloader, loss_fn, optimizer):
    train_loss, train_correct = 0.0, 0
    net.train()
    for batch in dataloader:
        images = batch['image']
        labels = batch['label']
        images, labels = images.to(device), labels.to(device)
        optimizer.zero_grad()
        output = net(images)
        loss = loss_fn(output, labels)
        loss.backward()
        optimizer.step()
        train_loss += loss.item() * images.size(0)
        scores, predictions = torch.max(output.data, 1)
        train_correct += (predictions == labels).sum().item()

    return train_loss, train_correct


def valid_epoch(net, device, dataloader, loss_fn):
    valid_loss, val_correct = 0.0, 0
    net.eval()
    for batch in dataloader:
        images = batch['image']
        labels = batch['label']
        images, labels = images.to(device), labels.to(device)
        output = net(images)
        loss = loss_fn(output, labels)
        valid_loss += loss.item() * images.size(0)
        scores, predictions = torch.max(output.data, 1)
        val_correct += (predictions == labels).sum().item()

    return valid_loss, val_correct


def train(net,
          dataset,
          device,
          epochs,
          batch_size,
          lr,
          exp_name
          ):

    # comet setup
    experiment = Experiment(
        api_key="k86kE4n1wy7wQkkCmvZeFAV3M",
        project_name="mimosa",
        workspace="zstoebs",
    )
    experiment.set_name(exp_name)

    hyper_params = {
        "learning_rate": lr,
        "epochs": epochs,
        "batch_size": batch_size,
    }
    experiment.log_parameters(hyper_params)

    foldperf = {}
    cv = RepeatedKFold(n_splits=10, n_repeats=3, random_state=1)
    for fold, (train_idx, val_idx) in enumerate(cv.split(np.arange(len(dataset)))):

        print('Fold {}'.format(fold + 1))

        train_sampler = SubsetRandomSampler(train_idx)
        val_sampler = SubsetRandomSampler(val_idx)
        train_loader = DataLoader(dataset, batch_size=batch_size, sampler=train_sampler)
        val_loader = DataLoader(dataset, batch_size=batch_size, sampler=val_sampler)

        model = copy.deepcopy(net)
        model.to(device)
        optimizer = torch.optim.Adam(net.parameters(), lr=lr)
        scheduler = torch.optim.lr_scheduler.ReduceLROnPlateau(optimizer, 'max', patience=2)

        history = {'train_loss': [], 'test_loss': [], 'train_acc': [], 'test_acc': []}

        for epoch in range(epochs):
            train_loss, train_correct = train_epoch(model, device, train_loader, criterion, optimizer)
            val_loss, test_correct = valid_epoch(model, device, val_loader, criterion)

            # TODO redo these metrics bc not multilabel
            train_loss = train_loss / len(train_sampler)
            train_acc = train_correct / len(train_sampler) * 100
            val_loss = val_loss / len(val_sampler)
            val_acc = test_correct / len(val_sampler) * 100

            with experiment.train():
                experiment.log_metric('Train Loss', train_loss, epoch=epoch)
                experiment.log_metric('Train Acc', train_acc, epoch=epoch)
            with experiment.validate():
                experiment.log_metric('Val Loss', val_loss, epoch=epoch)
                experiment.log_metric('Val Acc', val_acc, epoch=epoch)

            scheduler.step(val_acc)

            logging.info(
                "Epoch:{}/{} AVG Training Loss:{:.3f} AVG Test Loss:{:.3f} AVG Training Acc {:.2f} % AVG Test Acc {:.2f} %".format(
                    epoch + 1,
                    epochs,
                    train_loss,
                    val_loss,
                    train_acc,
                    val_acc))
            history['train_loss'].append(train_loss)
            history['test_loss'].append(val_loss)
            history['train_acc'].append(train_acc)
            history['test_acc'].append(val_acc)

        foldperf['fold{}'.format(fold + 1)] = history


if __name__ == '__main__':
    args = get_args()

    # create dataset
    transform = transforms.Compose([transforms.ToTensor()])
    dataset = MalwareImageDataset(args.examples_dir, args.labels_csv, transform=transform, image_sz=tuple(args.image_sz))
    n_examples = dataset.n_examples
    n_classes = dataset.n_classes
    logging.info('Dataset: # of examples = %d, # of classes = %d' % (n_examples, n_classes))

    # build net
    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
    net = ImageMultilabelClassifier(n_classes)

    logging.info(f'Using device {device}')

    # attempt load if spec'd
    if args.load:
        net.load_state_dict(
            torch.load(args.load, map_location=device)
        )
        logging.info(f'net loaded from {args.load}')

    net.to(device=device)

    train(net,
          dataset,
          device,
          args.epochs,
          args.batchsize,
          args.lr,
          args.name
          )


