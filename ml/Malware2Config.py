import logging
import numpy as np

import torch
import torch.nn as nn
from torchsummary import summary

from learn import train, cross_val
from learn.models import build_model
from learn.datasets import build_dataset

from util import get_parser

criterion = nn.BCELoss()


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')
    parser = get_parser()
    args = parser.parse_args()

    if args.modality == 'bytes':
        args.size = np.prod(args.size)

    # create dataset
    dataset = build_dataset(args)
    n_examples = dataset.n_examples
    n_classes = dataset.n_classes

    # build net
    net, criterion = build_model(args, n_classes)

    device = torch.device("cpu")
    if torch.cuda.is_available():
        device = torch.device("cuda:0")
        if torch.cuda.device_count() > 1:
            net = nn.DataParallel(net)

    input_sz = dataset[0]['example'].shape
    logging.info(f'Dataset: # of examples = {n_examples}, # of classes = {n_classes}, input size = {input_sz}')

    summary(net, input_sz)
    logging.info(f'Using device {device}')

    # attempt load if spec'd
    if args.load:
        net.load_state_dict(
            torch.load(args.load, map_location=device)
        )
        logging.info(f'net loaded from {args.load}')

    net.to(device=device)

    config = {'net': net,
              'dataset': dataset,
              'device': device,
              'epochs': args.epochs,
              'batch_size': args.batchsize,
              'lr': args.lr,
              'val_percent': args.val,
              'frequency': args.frequency,
              'criterion': criterion,
              'exp_name': args.name,
              }

    if args.mode == 'train':
        train(config)
    elif args.mode == 'cv' or args.mode == 'cross_val':
        cross_val(config)
    else:
        logging.error('Unknown mode entered: %s' % args.mode)
